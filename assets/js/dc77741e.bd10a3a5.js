"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[1234,4074,3482,7310],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,h=m["".concat(c,".").concat(u)]||m[u]||p[u]||s;return n?a.createElement(h,r(r({ref:t},l),{},{components:n})):a.createElement(h,r({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var d=2;d<s;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50358:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),o=n(52263);const s="authorByline_VoxI",r="authorLabel_a70t",i="authorProfileImage_URwT";const c=function(e){let{frontMatter:t}=e;const{siteConfig:n}=(0,o.Z)(),c=n.customFields.authors;return a.createElement(a.Fragment,null,t.authors&&a.createElement("div",{className:"docAuthors"},a.createElement("hr",null),t.authors.map((e=>a.createElement("div",{key:e,className:s},a.createElement("img",{className:i,src:`/img/${c[e].image?c[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${c[e].name}`}),a.createElement("div",null,a.createElement("div",{className:r},"Author:"),a.createElement("div",null,a.createElement("a",{href:c[e].link,target:"_blank"},c[e].name),", ",c[e].title))))),a.createElement("hr",null)))}},36773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const s={},r=void 0,i={unversionedId:"howtos/solutions/microservices/common-data/microservices-arch",id:"howtos/solutions/microservices/common-data/microservices-arch",title:"microservices-arch",description:"Lets take a look at the architecture of the demo application:",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-arch.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-arch",permalink:"/howtos/solutions/microservices/common-data/microservices-arch",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-arch.mdx",tags:[],version:"current",lastUpdatedAt:1702551239,formattedLastUpdatedAt:"Dec 14, 2023",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Lets take a look at the architecture of the demo application:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"products service"),": handles querying products from the database and returning them to the frontend"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"orders service"),": handles validating and creating orders"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"order history service"),": handles querying a customer's order history"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"payments service"),": handles processing orders for payment"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"api gateway"),": unifies the services under a single endpoint"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"mongodb/ postgresql"),": serves as the write-optimized database for storing orders, order history, products, etc.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You don't need to use MongoDB/ Postgresql as your write-optimized database in the demo application; you can use other ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"prisma supported databases"))," as well. This is just an example.")))}p.isMDXComponent=!0},80990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const s={},r=void 0,i={unversionedId:"howtos/solutions/vector/common-ai/microservices-ecommerce-ai",id:"howtos/solutions/vector/common-ai/microservices-ecommerce-ai",title:"microservices-ecommerce-ai",description:"The e-commerce microservices application consists of a frontend, built using Next.js with TailwindCSS. The application backend uses Node.js. The data is stored in Redis and either MongoDB or PostgreSQL, using Prisma. Below are screenshots showcasing the frontend of the e-commerce app.",source:"@site/docs/howtos/solutions/vector/common-ai/microservices-ecommerce-ai.mdx",sourceDirName:"howtos/solutions/vector/common-ai",slug:"/howtos/solutions/vector/common-ai/microservices-ecommerce-ai",permalink:"/howtos/solutions/vector/common-ai/microservices-ecommerce-ai",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/vector/common-ai/microservices-ecommerce-ai.mdx",tags:[],version:"current",lastUpdatedAt:1705608576,formattedLastUpdatedAt:"Jan 18, 2024",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The e-commerce microservices application consists of a frontend, built using ",(0,o.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," with ",(0,o.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"TailwindCSS"),". The application backend uses ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js"),". The data is stored in ",(0,o.kt)("a",{parentName:"p",href:"https://redis.com/try-free/"},"Redis")," and either MongoDB or PostgreSQL, using ",(0,o.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"Prisma"),". Below are screenshots showcasing the frontend of the e-commerce app."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Dashboard:")," Displays a list of products with different search functionalities, configurable in the settings page.\n",(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Products Page",src:n(7050).Z,width:"2618",height:"1194"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Settings:")," Accessible by clicking the gear icon at the top right of the dashboard. Control the search bar, chatbot visibility, and other features here.\n",(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Settings Page",src:n(8461).Z,width:"1822",height:"956"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Dashboard (Semantic Text Search):"),' Configured for semantic text search, the search bar enables natural language queries. Example: "pure cotton blue shirts."\n',(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Semantic Text Search",src:n(81168).Z,width:"1920",height:"900"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Dashboard (Semantic Image-Based Queries):"),' Configured for semantic image summary search, the search bar allows for image-based queries. Example: "Left chest nike logo."\n',(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Semantic Image Search",src:n(2680).Z,width:"2608",height:"1216"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Chat Bot:")," Located at the bottom right corner of the page, assisting in product searches and detailed views.\n",(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Chat Bot",src:n(99609).Z,width:"1920",height:"911"})),(0,o.kt)("p",null,"Selecting a product in the chat displays its details on the dashboard.\n",(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Product Details",src:n(73064).Z,width:"2624",height:"1252"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Shopping Cart:"),' Add products to the cart and check out using the "Buy Now" button.\n',(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Shopping Cart",src:n(12224).Z,width:"2624",height:"1244"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Order History:")," Post-purchase, the 'Orders' link in the top navigation bar shows the order status and history.\n",(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Order History Page",src:n(14065).Z,width:"2609",height:"674"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Admin Panel:")," Accessible via the 'admin' link in the top navigation. Displays purchase statistics and trending products.\n",(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Admin Page",src:n(37740).Z,width:"2604",height:"1230"}),"\n",(0,o.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Admin Page",src:n(96127).Z,width:"2608",height:"858"})))}p.isMDXComponent=!0},10992:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const s={},r=void 0,i={unversionedId:"howtos/solutions/vector/common-ai/microservices-source-code-ai",id:"howtos/solutions/vector/common-ai/microservices-source-code-ai",title:"microservices-source-code-ai",description:"Below is a command to the clone the source code for the application used in this tutorial",source:"@site/docs/howtos/solutions/vector/common-ai/microservices-source-code-ai.mdx",sourceDirName:"howtos/solutions/vector/common-ai",slug:"/howtos/solutions/vector/common-ai/microservices-source-code-ai",permalink:"/howtos/solutions/vector/common-ai/microservices-source-code-ai",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/vector/common-ai/microservices-source-code-ai.mdx",tags:[],version:"current",lastUpdatedAt:1705611366,formattedLastUpdatedAt:"Jan 18, 2024",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Below is a command to the clone the source code for the application used in this tutorial"),(0,o.kt)("p",{parentName:"admonition"},"git clone --branch v9.2.0 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}p.isMDXComponent=!0},35188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>g,frontMatter:()=>d,metadata:()=>p,toc:()=>u});var a=n(87462),o=(n(67294),n(3905)),s=n(50358),r=n(36773),i=n(80990),c=n(10992);const d={id:"index-solutions-gen-ai-chatbot",title:"How to Build a GenAI Chatbot Using LangChain and Redis",sidebar_label:"How to Build a GenAI Chatbot Using LangChain and Redis",slug:"/howtos/solutions/vector/gen-ai-chatbot",authors:["prasan","will"]},l=void 0,p={unversionedId:"howtos/solutions/vector/gen-ai-chatbot/index-solutions-gen-ai-chatbot",id:"howtos/solutions/vector/gen-ai-chatbot/index-solutions-gen-ai-chatbot",title:"How to Build a GenAI Chatbot Using LangChain and Redis",description:"What you will learn in this tutorial",source:"@site/docs/howtos/solutions/vector/gen-ai-chatbot/index-gen-ai-chatbot.mdx",sourceDirName:"howtos/solutions/vector/gen-ai-chatbot",slug:"/howtos/solutions/vector/gen-ai-chatbot",permalink:"/howtos/solutions/vector/gen-ai-chatbot",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/vector/gen-ai-chatbot/index-gen-ai-chatbot.mdx",tags:[],version:"current",lastUpdatedAt:1705608576,formattedLastUpdatedAt:"Jan 18, 2024",frontMatter:{id:"index-solutions-gen-ai-chatbot",title:"How to Build a GenAI Chatbot Using LangChain and Redis",sidebar_label:"How to Build a GenAI Chatbot Using LangChain and Redis",slug:"/howtos/solutions/vector/gen-ai-chatbot",authors:["prasan","will"]},sidebar:"docs",previous:{title:"How to Perform Vector Similarity Search Using Redis in NodeJS",permalink:"/howtos/solutions/vector/getting-started-vector"},next:{title:"Semantic Text Search Using LangChain (OpenAI) and Redis",permalink:"/howtos/solutions/vector/semantic-text-search"}},m={},u=[{value:"What you will learn in this tutorial",id:"what-you-will-learn-in-this-tutorial",level:2},{value:"Terminology",id:"terminology",level:2},{value:"Microservices architecture for an e-commerce application",id:"microservices-architecture-for-an-e-commerce-application",level:2},{value:"E-commerce application frontend using Next.js and Tailwind",id:"e-commerce-application-frontend-using-nextjs-and-tailwind",level:2},{value:"Chatbot architecture",id:"chatbot-architecture",level:2},{value:"Flow diagram",id:"flow-diagram",level:3},{value:"Sample user prompt and AI response",id:"sample-user-prompt-and-ai-response",level:3},{value:"Database setup",id:"database-setup",level:2},{value:"Sample data",id:"sample-data",level:3},{value:"OpenAI embeddings seeding",id:"openai-embeddings-seeding",level:3},{value:"Setting up the chatbot API",id:"setting-up-the-chatbot-api",level:2},{value:"API end point",id:"api-end-point",level:3},{value:"API implementation",id:"api-implementation",level:3},{value:"Ready to use Redis for genAI chatbot?",id:"ready-to-use-redis-for-genai-chatbot",level:2},{value:"Further reading",id:"further-reading",level:2}],h={toc:u};function g(e){let{components:t,...l}=e;return(0,o.kt)("wrapper",(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(s.Z,{frontMatter:d,mdxType:"Authors"}),(0,o.kt)("h2",{id:"what-you-will-learn-in-this-tutorial"},"What you will learn in this tutorial"),(0,o.kt)("p",null,"In this tutorial, you'll learn how to build a GenAI chatbot using ",(0,o.kt)("inlineCode",{parentName:"p"},"LangChain")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Redis"),". You'll also learn how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI's")," language model to generate responses to user queries and how to use Redis to store and retrieve data."),(0,o.kt)("p",null,"Here's what's covered:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"E-Commerce App")," : A sample e-commerce application where users can search for products and ask questions about them, add them to their cart, and purchase them."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Chatbot Architecture")," : The architecture of the chatbot, including the flow diagram, sample user prompt and it's AI response."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Database setup")," : Generating OpenAI embeddings for products and storing them in Redis."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Setting up the chatbot API")," : Creating a chatbot API that uses OpenAI and Redis to answer user questions and recommend products.")),(0,o.kt)("h2",{id:"terminology"},"Terminology"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Generative AI"),", also known as ",(0,o.kt)("strong",{parentName:"p"},"GenAI"),", is a category of artificial intelligence that specializes in creating new content based on pre-existing data. It can generate a wide array of content types, including text, images, videos, sounds, code, 3D designs, and other media formats. Unlike traditional AI models that focus on analyzing and interpreting existing data, GenAI models learn from existing data and then use their knowledge to generate something entirely new."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://js.langchain.com"},"LangChain"))," is an innovative library for building language model applications. It offers a structured way to combine different components like language models (e.g., OpenAI's models), storage solutions (like Redis), and custom logic. This modular approach facilitates the creation of sophisticated AI applications, including chatbots."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://openai.com/"},"OpenAI"))," provides advanced language models like GPT-3, which have revolutionized the field with their ability to understand and generate human-like text. These models form the backbone of many modern AI applications, including chatbots."),(0,o.kt)("h2",{id:"microservices-architecture-for-an-e-commerce-application"},"Microservices architecture for an e-commerce application"),(0,o.kt)(c.default,{mdxType:"SourceCode"}),(0,o.kt)(r.default,{mdxType:"InitialMicroservicesArchitecture"}),(0,o.kt)("h2",{id:"e-commerce-application-frontend-using-nextjs-and-tailwind"},"E-commerce application frontend using Next.js and Tailwind"),(0,o.kt)(i.default,{mdxType:"MicroservicesEcommerceAIDesign"}),(0,o.kt)("h2",{id:"chatbot-architecture"},"Chatbot architecture"),(0,o.kt)("h3",{id:"flow-diagram"},"Flow diagram"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"flow diagram",src:n(5402).Z,width:"1801",height:"943"})),(0,o.kt)("p",null,"1> ",(0,o.kt)("strong",{parentName:"p"},"Create Standalone Question"),": Create a standalone question using ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI's")," language model."),(0,o.kt)("p",null,"A standalone question is just a question reduced to the minimum number of words needed to express the request for information."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"//Example\nuserQuestion =\n  \"I'm thinking of buying one of your T-shirts but I need to know what your returns policy is as some T-shirts just don't fit me and I don't want to waste money.\";\n\n//semanticMeaning of above question\nstandAloneQuestion = 'What is your return policy?';\n")),(0,o.kt)("p",null,"2> ",(0,o.kt)("strong",{parentName:"p"},"Create Embeddings for Question"),": Once the question is created, ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI's")," language model generates an embedding for the question."),(0,o.kt)("p",null,"3> ",(0,o.kt)("strong",{parentName:"p"},"Find Nearest Match in Redis Vector Store"),": The embedding is then used to query ",(0,o.kt)("inlineCode",{parentName:"p"},"Redis")," vector store. The system searches for the nearest match to the question embedding among stored vectors"),(0,o.kt)("p",null,"4> ",(0,o.kt)("strong",{parentName:"p"},"Get Answer"),": With the user initial question, the nearest match from the vector store, and the conversation memory, ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI's")," language model generates an answer. This answer is then provided to the user."),(0,o.kt)("p",null,"Note : The system maintains a conversation memory, which tracks the ongoing conversation's context. This memory is crucial for ensuring the continuity and relevance of the conversation."),(0,o.kt)("p",null,"5> ",(0,o.kt)("strong",{parentName:"p"},"User Receives Answer"),": The answer is sent back to the user, completing the interaction cycle. The conversation memory is updated with this latest exchange to inform future responses."),(0,o.kt)("h3",{id:"sample-user-prompt-and-ai-response"},"Sample user prompt and AI response"),(0,o.kt)("p",null,"Say, OriginalQuestion of user is as follows:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"I am looking for a watch, Can you recommend anything for formal occasions with price under 50 dollars?")),(0,o.kt)("p",null,"Converted standaloneQuestion by openAI is as follows:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"What watches do you recommend for formal occasions with a price under $50?")),(0,o.kt)("p",null,"After vector similarity search on ",(0,o.kt)("strong",{parentName:"p"},"Redis"),", we get the following similarProducts:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"similarProducts = [\n  {\n    pageContent: ` Product details are as follows:\n                      productId: 11005.\n                      productDisplayName: Puma Men Visor 3HD Black Watch.\n                      price: 5495  ...`,\n    metadata: { productId: '11005' },\n  },\n  {\n    pageContent: ` Product details are as follows:\n                      productId: 11006.\n                      productDisplayName: Puma Men Race Luminous Black Chronograph Watch.\n                      price: 7795 ... `,\n    metadata: { productId: '11006' },\n  },\n];\n")),(0,o.kt)("p",null,"The final openAI response with above context and earlier chat history (if any) is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'answer = `I recommend two watches for formal occasions with a price under $50. \n\nFirst, we have the <a href="/?productId=11005">Puma Men Visor 3HD Black Watch</a> priced at $54.95. This watch features a heavy-duty design with a stylish dial and chunky casing, giving it a tough appearance - perfect for navigating the urban jungle. It has a square dial shape and a 32 mm case diameter. The watch comes with a 2-year warranty and is water-resistant up to 50 meters. \n\nSecond, we have the <a href="/?productId=11006">Puma Men Race Luminous Black Chronograph Watch</a> priced at $77.95. This watch also features a heavy-duty design with a stylish dial and chunky casing. It has a round dial shape and a 40 mm case diameter. The watch comes with a 2-year warranty and is water-resistant up to 50 meters. \n\nBoth these watches from Puma are perfect for formal occasions and are priced under $50. I hope this helps, and please let me know if you have any other questions!`;\n')),(0,o.kt)("h2",{id:"database-setup"},"Database setup"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Sign up for an ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/"},"OpenAI account"))," to get your API key to be used in the demo (add OPEN_AI_API_KEY variable in .env file). You can also refer to the ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/api-reference/introduction"},"OpenAI API documentation"))," for more information.")),(0,o.kt)(c.default,{mdxType:"SourceCode"}),(0,o.kt)("h3",{id:"sample-data"},"Sample data"),(0,o.kt)("p",null,"For the purposes of this tutorial, let's consider a simplified e-commerce context. The ",(0,o.kt)("inlineCode",{parentName:"p"},"products")," JSON provided offers a glimpse into AI search functionalities we'll be operating on."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="database/fashion-dataset/001/products/*.json"',title:'"database/fashion-dataset/001/products/*.json"'},"const products = [\n  {\n    productId: '11000',\n    price: 3995,\n    productDisplayName: 'Puma Men Slick 3HD Yellow Black Watches',\n    variantName: 'Slick 3HD Yellow',\n    brandName: 'Puma',\n    ageGroup: 'Adults-Men',\n    gender: 'Men',\n    displayCategories: 'Accessories',\n    masterCategory_typeName: 'Accessories',\n    subCategory_typeName: 'Watches',\n    styleImages_default_imageURL:\n      'http://host.docker.internal:8080/images/11000.jpg',\n    productDescriptors_description_value:\n      '<p style=\"text-align: justify;\">Stylish and comfortable, ...',\n    stockQty: 25,\n  },\n  //...\n];\n")),(0,o.kt)("h3",{id:"openai-embeddings-seeding"},"OpenAI embeddings seeding"),(0,o.kt)("p",null,"Below is the sample code to seed ",(0,o.kt)("inlineCode",{parentName:"p"},"products")," data as openAI embeddings into Redis."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="database/src/open-ai.ts"',title:'"database/src/open-ai.ts"'},"import { Document } from 'langchain/document';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { RedisVectorStore } from 'langchain/vectorstores/redis';\n\n/**\n * Adds OpenAI embeddings to Redis for the given products.\n *\n * @param _products - An array of (ecommerce) products.\n * @param _redisClient - The Redis client used to connect to the Redis server.\n * @param _openAIApiKey - The API key for accessing the OpenAI service.\n */\nconst addOpenAIEmbeddingsToRedis = async (\n  _products,\n  _redisClient,\n  _openAIApiKey,\n) => {\n  if (_products?.length > 0 && _redisClient && _openAIApiKey) {\n    // Check if the data is already seeded\n    const existingKeys = await _redisClient.keys('openAIProducts:*');\n    if (existingKeys.length > 0) {\n      console.log('seeding openAIEmbeddings skipped !');\n      return;\n    }\n\n    const vectorDocs: Document[] = [];\n    // Create a document for each product\n    for (let product of _products) {\n      let doc = new Document({\n        metadata: {\n          productId: product.productId,\n        },\n        pageContent: ` Product details are as follows:\n                productId: ${product.productId}.\n    \n                productDisplayName: ${product.productDisplayName}.\n                \n                price: ${product.price}.\n    \n                variantName: ${product.variantName}.\n    \n                brandName: ${product.brandName}.\n    \n                ageGroup: ${product.ageGroup}.\n    \n                gender: ${product.gender}.\n    \n                productColors: ${product.productColors}\n    \n                Category:  ${product.displayCategories}, ${product.masterCategory_typeName} - ${product.subCategory_typeName}\n    \n                productDescription:  ${product.productDescriptors_description_value}`,\n      });\n\n      vectorDocs.push(doc);\n    }\n\n    // Create a new OpenAIEmbeddings instance\n    const embeddings = new OpenAIEmbeddings({\n      openAIApiKey: _openAIApiKey,\n    });\n    // Add the documents to the RedisVectorStore\n    const vectorStore = await RedisVectorStore.fromDocuments(\n      vectorDocs,\n      embeddings,\n      {\n        redisClient: _redisClient,\n        indexName: 'openAIProductsIdx',\n        keyPrefix: 'openAIProducts:',\n      },\n    );\n    console.log('seeding OpenAIEmbeddings completed');\n  }\n};\n")),(0,o.kt)("p",null,"You can observe openAIProducts JSON in RedisInsight:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Redis Insight AI products",src:n(17984).Z,width:"1920",height:"1054"})),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Download ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight"))," to visually explore your Redis data or to engage with raw Redis commands in the workbench.")),(0,o.kt)("h2",{id:"setting-up-the-chatbot-api"},"Setting up the chatbot API"),(0,o.kt)("p",null,"Once products data is seeded as openAI embeddings into Redis, we can create a ",(0,o.kt)("inlineCode",{parentName:"p"},"chatbot")," API to answer user questions and recommend products."),(0,o.kt)("h3",{id:"api-end-point"},"API end point"),(0,o.kt)("p",null,"The code that follows shows an example API request and response for the ",(0,o.kt)("inlineCode",{parentName:"p"},"chatBot")," API:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'POST http://localhost:3000/products/chatBot\n{\n    "userMessage":"I am looking for a watch, Can you recommend anything for formal occasions with price under 50 dollars?"\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": "I recommend two watches for formal occasions with a price under $50.\n\n  First, we have the <a href=\'/?productId=11005\'>Puma Men Visor 3HD Black Watch</a> priced at $54.95. This watch features a heavy-duty design with a stylish dial and chunky casing, giving it a tough appearance - perfect for navigating the urban jungle. It has a square dial shape and a 32 mm case diameter. The watch comes with a 2-year warranty and is water-resistant up to 50 meters.\n\n  Second, we have the <a href=\'/?productId=11006\'>Puma Men Race Luminous Black Chronograph Watch</a> priced at $77.95. This watch also features a heavy-duty design with a stylish dial and chunky casing. It has a round dial shape and a 40 mm case diameter. The watch comes with a 2-year warranty and is water-resistant up to 50 meters.\n\n  Both these watches from Puma are perfect for formal occasions and are priced under $50. I hope this helps, and please let me know if you have any other questions!",\n\n  "error": null,\n  "auth": "SES_54f211db-50a7-45df-8067-c3dc4272beb2"\n}\n')),(0,o.kt)("h3",{id:"api-implementation"},"API implementation"),(0,o.kt)("p",null,"When you make a request, it goes through the API gateway to the ",(0,o.kt)("inlineCode",{parentName:"p"},"products")," service. Ultimately, it ends up calling an ",(0,o.kt)("inlineCode",{parentName:"p"},"chatBotMessage")," function which looks as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/src/services/products/src/open-ai-prompt.ts"',title:'"server/src/services/products/src/open-ai-prompt.ts"'},"import {\n  ChatOpenAI,\n  ChatOpenAICallOptions,\n} from 'langchain/chat_models/openai';\nimport { PromptTemplate } from 'langchain/prompts';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { RedisVectorStore } from 'langchain/vectorstores/redis';\nimport { StringOutputParser } from 'langchain/schema/output_parser';\nimport { Document } from 'langchain/document';\n\nlet llm: ChatOpenAI<ChatOpenAICallOptions>;\n\nconst chatBotMessage = async (\n  _userMessage: string,\n  _sessionId: string,\n  _openAIApiKey: string,\n) => {\n  const CHAT_BOT_LOG = 'CHAT_BOT_LOG_STREAM';\n  const redisWrapperInst = getRedis();\n\n  // Add user message to chat history\n  const chatHistoryName = 'chatHistory:' + _sessionId;\n  redisWrapperInst.addItemToList(\n    chatHistoryName,\n    'userMessage: ' + _userMessage,\n  );\n  // add log\n  addMessageToStream(\n    { name: 'originalQuestion', comments: _userMessage },\n    CHAT_BOT_LOG,\n  );\n\n  // (1) Create a standalone question\n  const standaloneQuestion = await convertToStandAloneQuestion(\n    _userMessage,\n    _sessionId,\n    _openAIApiKey,\n  );\n  // add log\n  addMessageToStream(\n    { name: 'standaloneQuestion', comments: standaloneQuestion },\n    CHAT_BOT_LOG,\n  );\n\n  // (2) Get similar products from Redis\n  const similarProducts = await getSimilarProductsByVSS(\n    standaloneQuestion,\n    _openAIApiKey,\n  );\n  if (similarProducts?.length) {\n    // add log\n    addMessageToStream(\n      { name: 'similarProducts', comments: JSON.stringify(similarProducts) },\n      CHAT_BOT_LOG,\n    );\n  }\n\n  // Combine the product details into a single document\n  const productDetails = combineVectorDocuments(similarProducts);\n  console.log('productDetails:', productDetails);\n\n  // (3) Get answer from OpenAI\n  const answer = await convertToAnswer(\n    _userMessage,\n    standaloneQuestion,\n    productDetails,\n    _sessionId,\n    _openAIApiKey,\n  );\n  // add log\n  addMessageToStream({ name: 'answer', comments: answer }, CHAT_BOT_LOG);\n\n  // Add answer to chat history\n  redisWrapperInst.addItemToList(\n    chatHistoryName,\n    'openAIMessage(You): ' + answer,\n  );\n\n  return answer;\n};\n")),(0,o.kt)("p",null,"Below function converts the userMessage to standaloneQuestion using ",(0,o.kt)("inlineCode",{parentName:"p"},"openAI")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/src/services/products/src/open-ai-prompt.ts"',title:'"server/src/services/products/src/open-ai-prompt.ts"'},"// (1) Create a standalone question\nconst convertToStandAloneQuestion = async (\n  _userQuestion: string,\n  _sessionId: string,\n  _openAIApiKey: string,\n) => {\n  const llm = getOpenAIInstance(_openAIApiKey);\n\n  const chatHistory = await getChatHistory(_sessionId);\n\n  const standaloneQuestionTemplate = `Given some conversation history (if any) and a question, convert it to a standalone question. \n    ***********************************************************\n    conversation history: \n         ${chatHistory}\n    ***********************************************************\n    question: {question} \n    standalone question:`;\n\n  const standaloneQuestionPrompt = PromptTemplate.fromTemplate(\n    standaloneQuestionTemplate,\n  );\n\n  const chain = standaloneQuestionPrompt\n    .pipe(llm)\n    .pipe(new StringOutputParser());\n\n  const response = await chain.invoke({\n    question: _userQuestion,\n  });\n\n  return response;\n};\nconst getOpenAIInstance = (_openAIApiKey: string) => {\n  if (!llm) {\n    llm = new ChatOpenAI({\n      openAIApiKey: _openAIApiKey,\n    });\n  }\n  return llm;\n};\n\nconst getChatHistory = async (_sessionId: string, _separator?: string) => {\n  let chatHistory = '';\n  if (!_separator) {\n    _separator = '\\n\\n';\n  }\n  if (_sessionId) {\n    const redisWrapperInst = getRedis();\n    const chatHistoryName = 'chatHistory:' + _sessionId;\n    const items = await redisWrapperInst.getAllItemsFromList(chatHistoryName);\n\n    if (items?.length) {\n      chatHistory = items.join(_separator);\n    }\n  }\n  return chatHistory;\n};\nconst combineVectorDocuments = (\n  _vectorDocs: Document[],\n  _separator?: string,\n) => {\n  if (!_separator) {\n    _separator = '\\n\\n --------------------- \\n\\n';\n  }\n  return _vectorDocs.map((doc) => doc.pageContent).join(_separator);\n};\n")),(0,o.kt)("p",null,"Below function uses ",(0,o.kt)("inlineCode",{parentName:"p"},"Redis")," to find similar products for the standaloneQuestion"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/src/services/products/src/open-ai-prompt.ts"',title:'"server/src/services/products/src/open-ai-prompt.ts"'},"// (2) Get similar products from Redis\nconst getSimilarProductsByVSS = async (\n  _standAloneQuestion: string,\n  _openAIApiKey: string,\n) => {\n  const client = getNodeRedisClient();\n\n  const embeddings = new OpenAIEmbeddings({\n    openAIApiKey: _openAIApiKey,\n  });\n  const vectorStore = new RedisVectorStore(embeddings, {\n    redisClient: client,\n    indexName: 'openAIProductsIdx',\n    keyPrefix: 'openAIProducts:',\n  });\n\n  const KNN = 3;\n  /* Simple standalone search in the vector DB */\n  const vectorDocs = await vectorStore.similaritySearch(\n    _standAloneQuestion,\n    KNN,\n  );\n\n  return vectorDocs;\n};\n")),(0,o.kt)("p",null,"Below function uses ",(0,o.kt)("inlineCode",{parentName:"p"},"openAI")," to convert the standaloneQuestion, similar products from Redis and other context to a human understandable answer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/src/services/products/src/open-ai-prompt.ts"',title:'"server/src/services/products/src/open-ai-prompt.ts"'},"// (3) Get answer from OpenAI\nconst convertToAnswer = async (\n  _originalQuestion: string,\n  _standAloneQuestion: string,\n  _productDetails: string,\n  _sessionId: string,\n  _openAIApiKey: string,\n) => {\n  const llm = getOpenAIInstance(_openAIApiKey);\n\n  const chatHistory = await getChatHistory(_sessionId);\n\n  const answerTemplate = `\n    Please assume the persona of a retail shopping assistant for this conversation.\n    Use a friendly tone, and assume the target audience are normal people looking for a product in a ecommerce website.\n\n    ***********************************************************\n    ${\n      chatHistory\n        ? `\n    Conversation history between user and you is : \n       ${chatHistory}\n    `\n        : ''\n    }\n    ***********************************************************\n    OriginalQuestion of user is : {originalQuestion}\n    ***********************************************************\n    converted stand alone question is : {standAloneQuestion}\n    ***********************************************************\n    resulting details of products for the stand alone question are :\n             {productDetails}\n    Note : Different product details are separated by \"---------------------\" (if any)            \n    ***********************************************************\n    Answer the question based on the context provided and the conversation history.\n    \n    If you  don't know the answer, please direct the questioner to email help@redis.com. Don't try to suggest any product out of context as it may not be in the store.\n\n    Let the answer include product display name, price and optional other details based on question asked.\n\n    Let the product display name be a link like <a href=\"/?productId=\"> productDisplayName </a>\n    so that user can click on it and go to the product page with help of productId.\n    \n    answer: `;\n\n  const answerPrompt = PromptTemplate.fromTemplate(answerTemplate);\n  const chain = answerPrompt.pipe(llm).pipe(new StringOutputParser());\n\n  const response = await chain.invoke({\n    originalQuestion: _originalQuestion,\n    standAloneQuestion: _standAloneQuestion,\n    productDetails: _productDetails,\n  });\n\n  return response;\n};\n")),(0,o.kt)("p",null,"You can observe chat history and intermediate chat logs in RedisInsight:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Redis Insight chat history",src:n(42614).Z,width:"1920",height:"1056"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Redis Insight chat log",src:n(77193).Z,width:"1920",height:"1052"})),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Download ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight"))," to visually explore your Redis data or to engage with raw Redis commands in the workbench.")),(0,o.kt)("h2",{id:"ready-to-use-redis-for-genai-chatbot"},"Ready to use Redis for genAI chatbot?"),(0,o.kt)("p",null,"Building a GenAI chatbot using LangChain and Redis involves integrating advanced AI models with efficient storage solutions. This tutorial covers the fundamental steps and code needed to develop a chatbot capable of handling e-commerce queries. With these tools, you can create a responsive, intelligent chatbot for a variety of applications"),(0,o.kt)("h2",{id:"further-reading"},"Further reading"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/howtos/solutions/vector/getting-started-vector"},"Perform vector similarity search using Redis"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://js.langchain.com/docs/get_started/quickstart"},"LangChain JS")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://scrimba.com/learn/langchain"},"Learn LangChain")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://js.langchain.com/docs/integrations/vectorstores/redis"},"LangChain redis integration")))))}g.isMDXComponent=!0},2680:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-dashboard-semantic-image-770befcd5c2129a025fc5fe9058d286f.png"},81168:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-dashboard-semantic-text-e92f1bb2c539726c3125969a90d5a5d0.png"},7050:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-dashboard-41b6a52ee5d36a9db8b513d285f1d826.png"},99609:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/02-ai-bot-d5546b6243f616636d6f1b5de453d167.png"},73064:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/03-ai-bot-product-ed8e13e4a32f72b952d683473a4c4d0f.png"},12224:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/04-ai-product-shopping-cart-5445685389780e76ba7135e47f0ad20b.png"},14065:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/05-order-history-fa1ebafcf8ac4ee027f5616a00044ee9.png"},37740:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/06-admin-charts-5ae00e6182be0b4ada06049f5d18d0aa.png"},96127:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/07-admin-top-trending-941390270b22d7b4243b386af50ec743.png"},8461:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/08-settings-ai-3e13b6cf77c050ec54d6b444f47624bc.png"},5402:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/chat-bot-flow-c7e389bbe40a85354630e0ec8b45243e.png"},17984:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/redis-insight-ai-products-43d2d9e8851e513777b5390c8c385c26.png"},42614:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/redis-insight-chat-history-64378d953fada2307e36455db66ec5d6.png"},77193:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/redis-insight-chat-log-ab79e77e0998eadc2bb5b124911105ce.png"}}]);