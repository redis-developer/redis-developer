"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[1481,4074,3482,7310],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),m=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=m(n),u=i,g=p["".concat(c,".").concat(u)]||p[u]||l[u]||r;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var m=2;m<r;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},50358:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),i=n(52263);const r="authorByline_VoxI",o="authorLabel_a70t",s="authorProfileImage_URwT";const c=function(e){let{frontMatter:t}=e;const{siteConfig:n}=(0,i.Z)(),c=n.customFields.authors;return a.createElement(a.Fragment,null,t.authors&&a.createElement("div",{className:"docAuthors"},a.createElement("hr",null),t.authors.map((e=>a.createElement("div",{key:e,className:r},a.createElement("img",{className:s,src:`/img/${c[e].image?c[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${c[e].name}`}),a.createElement("div",null,a.createElement("div",{className:o},"Author:"),a.createElement("div",null,a.createElement("a",{href:c[e].link,target:"_blank"},c[e].name),", ",c[e].title))))),a.createElement("hr",null)))}},36773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=n(87462),i=(n(67294),n(3905));const r={},o=void 0,s={unversionedId:"howtos/solutions/microservices/common-data/microservices-arch",id:"howtos/solutions/microservices/common-data/microservices-arch",title:"microservices-arch",description:"Lets take a look at the architecture of the demo application:",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-arch.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-arch",permalink:"/howtos/solutions/microservices/common-data/microservices-arch",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-arch.mdx",tags:[],version:"current",lastUpdatedAt:1702551239,formattedLastUpdatedAt:"Dec 14, 2023",frontMatter:{}},c={},m=[],d={toc:m};function l(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Lets take a look at the architecture of the demo application:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"products service"),": handles querying products from the database and returning them to the frontend"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"orders service"),": handles validating and creating orders"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"order history service"),": handles querying a customer's order history"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"payments service"),": handles processing orders for payment"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"api gateway"),": unifies the services under a single endpoint"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"mongodb/ postgresql"),": serves as the write-optimized database for storing orders, order history, products, etc.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You don't need to use MongoDB/ Postgresql as your write-optimized database in the demo application; you can use other ",(0,i.kt)("u",null,(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"prisma supported databases"))," as well. This is just an example.")))}l.isMDXComponent=!0},80990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=n(87462),i=(n(67294),n(3905));const r={},o=void 0,s={unversionedId:"howtos/solutions/vector/common-ai/microservices-ecommerce-ai",id:"howtos/solutions/vector/common-ai/microservices-ecommerce-ai",title:"microservices-ecommerce-ai",description:"The e-commerce microservices application consists of a frontend, built using Next.js with TailwindCSS. The application backend uses Node.js. The data is stored in Redis and either MongoDB or PostgreSQL, using Prisma. Below are screenshots showcasing the frontend of the e-commerce app.",source:"@site/docs/howtos/solutions/vector/common-ai/microservices-ecommerce-ai.mdx",sourceDirName:"howtos/solutions/vector/common-ai",slug:"/howtos/solutions/vector/common-ai/microservices-ecommerce-ai",permalink:"/howtos/solutions/vector/common-ai/microservices-ecommerce-ai",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/vector/common-ai/microservices-ecommerce-ai.mdx",tags:[],version:"current",lastUpdatedAt:1705608576,formattedLastUpdatedAt:"Jan 18, 2024",frontMatter:{}},c={},m=[],d={toc:m};function l(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The e-commerce microservices application consists of a frontend, built using ",(0,i.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," with ",(0,i.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"TailwindCSS"),". The application backend uses ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js"),". The data is stored in ",(0,i.kt)("a",{parentName:"p",href:"https://redis.com/try-free/"},"Redis")," and either MongoDB or PostgreSQL, using ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"Prisma"),". Below are screenshots showcasing the frontend of the e-commerce app."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dashboard:")," Displays a list of products with different search functionalities, configurable in the settings page.\n",(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Products Page",src:n(7050).Z,width:"2618",height:"1194"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Settings:")," Accessible by clicking the gear icon at the top right of the dashboard. Control the search bar, chatbot visibility, and other features here.\n",(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Settings Page",src:n(8461).Z,width:"1822",height:"956"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dashboard (Semantic Text Search):"),' Configured for semantic text search, the search bar enables natural language queries. Example: "pure cotton blue shirts."\n',(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Semantic Text Search",src:n(81168).Z,width:"1920",height:"900"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dashboard (Semantic Image-Based Queries):"),' Configured for semantic image summary search, the search bar allows for image-based queries. Example: "Left chest nike logo."\n',(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Semantic Image Search",src:n(2680).Z,width:"2608",height:"1216"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Chat Bot:")," Located at the bottom right corner of the page, assisting in product searches and detailed views.\n",(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Chat Bot",src:n(99609).Z,width:"1920",height:"911"})),(0,i.kt)("p",null,"Selecting a product in the chat displays its details on the dashboard.\n",(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Product Details",src:n(73064).Z,width:"2624",height:"1252"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Shopping Cart:"),' Add products to the cart and check out using the "Buy Now" button.\n',(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Shopping Cart",src:n(12224).Z,width:"2624",height:"1244"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Order History:")," Post-purchase, the 'Orders' link in the top navigation bar shows the order status and history.\n",(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Order History Page",src:n(14065).Z,width:"2609",height:"674"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Admin Panel:")," Accessible via the 'admin' link in the top navigation. Displays purchase statistics and trending products.\n",(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Admin Page",src:n(37740).Z,width:"2604",height:"1230"}),"\n",(0,i.kt)("img",{alt:"Redis Microservices E-commerce App Frontend - Admin Page",src:n(96127).Z,width:"2608",height:"858"})))}l.isMDXComponent=!0},10992:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=n(87462),i=(n(67294),n(3905));const r={},o=void 0,s={unversionedId:"howtos/solutions/vector/common-ai/microservices-source-code-ai",id:"howtos/solutions/vector/common-ai/microservices-source-code-ai",title:"microservices-source-code-ai",description:"Below is a command to the clone the source code for the application used in this tutorial",source:"@site/docs/howtos/solutions/vector/common-ai/microservices-source-code-ai.mdx",sourceDirName:"howtos/solutions/vector/common-ai",slug:"/howtos/solutions/vector/common-ai/microservices-source-code-ai",permalink:"/howtos/solutions/vector/common-ai/microservices-source-code-ai",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/vector/common-ai/microservices-source-code-ai.mdx",tags:[],version:"current",lastUpdatedAt:1705611366,formattedLastUpdatedAt:"Jan 18, 2024",frontMatter:{}},c={},m=[],d={toc:m};function l(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Below is a command to the clone the source code for the application used in this tutorial"),(0,i.kt)("p",{parentName:"admonition"},"git clone --branch v9.2.0 ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}l.isMDXComponent=!0},48815:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>d,metadata:()=>p,toc:()=>g});var a=n(87462),i=(n(67294),n(3905)),r=n(50358),o=n(36773),s=n(80990);const c=n.p+"assets/images/product-img-741e131fef5eb5774118950873e3a5da.webp";var m=n(10992);const d={id:"index-image-summary-search",title:"Semantic Image Based Queries Using LangChain (OpenAI) and Redis",sidebar_label:"Semantic Image Based Queries Using LangChain (OpenAI) and Redis",slug:"/howtos/solutions/vector/image-summary-search",authors:["prasan","will"]},l=void 0,p={unversionedId:"howtos/solutions/vector/image-summary-search/index-image-summary-search",id:"howtos/solutions/vector/image-summary-search/index-image-summary-search",title:"Semantic Image Based Queries Using LangChain (OpenAI) and Redis",description:"What you will learn in this tutorial",source:"@site/docs/howtos/solutions/vector/image-summary-search/index-image-summary-search.mdx",sourceDirName:"howtos/solutions/vector/image-summary-search",slug:"/howtos/solutions/vector/image-summary-search",permalink:"/howtos/solutions/vector/image-summary-search",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/vector/image-summary-search/index-image-summary-search.mdx",tags:[],version:"current",lastUpdatedAt:1705611366,formattedLastUpdatedAt:"Jan 18, 2024",frontMatter:{id:"index-image-summary-search",title:"Semantic Image Based Queries Using LangChain (OpenAI) and Redis",sidebar_label:"Semantic Image Based Queries Using LangChain (OpenAI) and Redis",slug:"/howtos/solutions/vector/image-summary-search",authors:["prasan","will"]},sidebar:"docs",previous:{title:"Semantic Text Search Using LangChain (OpenAI) and Redis",permalink:"/howtos/solutions/vector/semantic-text-search"},next:{title:"How to build a Real-Time Leaderboard app Using Redis",permalink:"/howtos/leaderboard"}},u={},g=[{value:"What you will learn in this tutorial",id:"what-you-will-learn-in-this-tutorial",level:2},{value:"Terminology",id:"terminology",level:2},{value:"Microservices architecture for an e-commerce application",id:"microservices-architecture-for-an-e-commerce-application",level:2},{value:"E-commerce application frontend using Next.js and Tailwind",id:"e-commerce-application-frontend-using-nextjs-and-tailwind",level:2},{value:"Database setup",id:"database-setup",level:2},{value:"Sample data",id:"sample-data",level:3},{value:"Generating OpenAI image summary",id:"generating-openai-image-summary",level:3},{value:"Sample image &amp; OpenAI summary",id:"sample-image--openai-summary",level:3},{value:"Seeding Image summary embeddings",id:"seeding-image-summary-embeddings",level:3},{value:"Setting up the search API",id:"setting-up-the-search-api",level:2},{value:"API end point",id:"api-end-point",level:3},{value:"API implementation",id:"api-implementation",level:3},{value:"Frontend UI",id:"frontend-ui",level:3},{value:"Ready to use Redis for semantic image based queries?",id:"ready-to-use-redis-for-semantic-image-based-queries",level:2},{value:"Further reading",id:"further-reading",level:2}],h={toc:g};function f(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(r.Z,{frontMatter:d,mdxType:"Authors"}),(0,i.kt)("h2",{id:"what-you-will-learn-in-this-tutorial"},"What you will learn in this tutorial"),(0,i.kt)("p",null,"This tutorial demonstrates how to perform semantic search on product images using LangChain (OpenAI) and Redis. Specifically, we'll cover the following topics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"E-Commerce Application Context")," : Consider a sample e-commerce application scenario where customers can utilize image-based queries for product searches, add items to their shopping cart, and complete purchases, thereby highlighting a real-world application of semantic search.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Database setup")," : This involves generating descriptive summaries for product images, creating semantic embeddings for generated summaries and efficiently storing them in Redis.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Setting up the search API")," : This API is designed to process user queries in the context of image content. It integrates the capabilities of OpenAI for semantic analysis with Redis for efficient data retrieval and storage."))),(0,i.kt)("h2",{id:"terminology"},"Terminology"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://js.langchain.com"},"LangChain"))," is an innovative library for building language model applications. It offers a structured way to combine different components like language models (e.g., OpenAI's models), storage solutions (like Redis), and custom logic. This modular approach facilitates the creation of sophisticated AI applications."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://openai.com/"},"OpenAI"))," provides advanced language models like GPT-3, which have revolutionized the field with their ability to understand and generate human-like text. These models form the backbone of many modern AI applications including semantic text/ image search and chatbots."),(0,i.kt)("h2",{id:"microservices-architecture-for-an-e-commerce-application"},"Microservices architecture for an e-commerce application"),(0,i.kt)(m.default,{mdxType:"SourceCode"}),(0,i.kt)(o.default,{mdxType:"InitialMicroservicesArchitecture"}),(0,i.kt)("h2",{id:"e-commerce-application-frontend-using-nextjs-and-tailwind"},"E-commerce application frontend using Next.js and Tailwind"),(0,i.kt)(s.default,{mdxType:"MicroservicesEcommerceAIDesign"}),(0,i.kt)("h2",{id:"database-setup"},"Database setup"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Sign up for an ",(0,i.kt)("u",null,(0,i.kt)("a",{parentName:"p",href:"https://platform.openai.com/"},"OpenAI account"))," to get your API key to be used in the demo (add OPEN_AI_API_KEY variable in .env file). You can also refer to the ",(0,i.kt)("u",null,(0,i.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/api-reference/introduction"},"OpenAI API documentation"))," for more information.")),(0,i.kt)(m.default,{mdxType:"SourceCode"}),(0,i.kt)("h3",{id:"sample-data"},"Sample data"),(0,i.kt)("p",null,"In this tutorial, we'll use a simplified e-commerce dataset. Specifically, our JSON structure includes ",(0,i.kt)("inlineCode",{parentName:"p"},"product")," details and a key named ",(0,i.kt)("inlineCode",{parentName:"p"},"styleImages_default_imageURL"),", which links to an image of the product. This image will be the focus of our AI-driven semantic search."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="database/fashion-dataset/001/products/*.json"',title:'"database/fashion-dataset/001/products/*.json"'},"const products = [\n  {\n    productId: '11000',\n    price: 3995,\n    productDisplayName: 'Puma Men Slick 3HD Yellow Black Watches',\n    variantName: 'Slick 3HD Yellow',\n    brandName: 'Puma',\n    // Additional product details...\n    styleImages_default_imageURL:\n      'http://host.docker.internal:8080/images/11000.jpg',\n    // Other properties...\n  },\n  // Additional products...\n];\n")),(0,i.kt)("h3",{id:"generating-openai-image-summary"},"Generating OpenAI image summary"),(0,i.kt)("p",null,"The following code segment outlines the process of generating a text summary for a product image using OpenAI's capabilities. We'll first convert the image URL to a base64 string using ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchImageAndConvertToBase64")," function and then utilize OpenAI to generate a summary of the image using ",(0,i.kt)("inlineCode",{parentName:"p"},"getOpenAIImageSummary")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="database/src/open-ai-image.ts"',title:'"database/src/open-ai-image.ts"'},"import {\n  ChatOpenAI,\n  ChatOpenAICallOptions,\n} from 'langchain/chat_models/openai';\nimport { HumanMessage } from 'langchain/schema';\nimport { Document } from 'langchain/document';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { RedisVectorStore } from 'langchain/vectorstores/redis';\n\nlet llm: ChatOpenAI<ChatOpenAICallOptions>;\n\n// Instantiates the LangChain ChatOpenAI instance\nconst getOpenAIVisionInstance = (_openAIApiKey: string) => {\n  //OpenAI supports  images with text in input messages with their gpt-4-vision-preview.\n  if (!llm) {\n    llm = new ChatOpenAI({\n      openAIApiKey: _openAIApiKey,\n      modelName: 'gpt-4-vision-preview',\n      maxTokens: 1024,\n    });\n  }\n  return llm;\n};\n\nconst fetchImageAndConvertToBase64 = async (_imageURL: string) => {\n  let base64Image = '';\n  try {\n    const response = await axios.get(_imageURL, {\n      responseType: 'arraybuffer',\n    });\n    // Convert image to Base64\n    base64Image = Buffer.from(response.data, 'binary').toString('base64');\n  } catch (error) {\n    console.error(\n      `Error fetching or converting the image: ${_imageURL}`,\n      error,\n    );\n  }\n  return base64Image;\n};\n\n// Generates an OpenAI summary for a given base64 image string\nconst getOpenAIImageSummary = async (\n  _openAIApiKey: string,\n  _base64Image: string,\n  _product: Prisma.ProductCreateInput,\n) => {\n  /*\n     Reference : https://js.langchain.com/docs/integrations/chat/openai#multimodal-messages\n\n    - This function utilizes OpenAI's multimodal capabilities to generate a summary from the image. \n    - It constructs a prompt that combines the product description with the image.\n    - OpenAI's vision model then processes this prompt to generate a detailed summary.\n\n   */\n  let imageSummary = '';\n\n  try {\n    if (_openAIApiKey && _base64Image && _product) {\n      const llmInst = getOpenAIVisionInstance(_openAIApiKey);\n\n      const text = `Below are the product details and image of an e-commerce product for reference. Please conduct and provide a comprehensive analysis of the product depicted in the image . \n        \n            Product Details:\n            ${_product.productDescriptors_description_value}\n            \n            Image:\n        `;\n      // Constructing a multimodal message combining text and image\n      const imagePromptMessage = new HumanMessage({\n        content: [\n          {\n            type: 'text',\n            text: text,\n          },\n          {\n            type: 'image_url',\n            image_url: {\n              url: `data:image/jpeg;base64,${_base64Image}`,\n              detail: 'high', // low, high (if you want more detail)\n            },\n          },\n        ],\n      });\n\n      // Invoking the LangChain ChatOpenAI model with the constructed message\n      const response = await llmInst.invoke([imagePromptMessage]);\n      if (response?.content) {\n        imageSummary = <string>response.content;\n      }\n    }\n  } catch (err) {\n    console.log(\n      `Error generating OpenAIImageSummary for product id ${_product.productId}`,\n      err,\n    );\n  }\n  return imageSummary;\n};\n")),(0,i.kt)("h3",{id:"sample-image--openai-summary"},"Sample image & OpenAI summary"),(0,i.kt)("p",null,"The following section demonstrates the result of the above process. We'll use the image of a Puma T-shirt and generate a summary using OpenAI's capabilities."),(0,i.kt)("img",{src:c,alt:"Sample Product Image",width:"500",className:"margin-bottom--md"}),(0,i.kt)("p",null,"Comprehensive summary generated by the OpenAI model is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"This product is a black round neck T-shirt featuring a design consistent with the Puma brand aesthetic, which includes their iconic leaping cat logo in a contrasting yellow color placed prominently across the chest area. The T-shirt is made from 100% cotton, suggesting it is likely to be breathable and soft to the touch. It has a classic short-sleeve design with a ribbed neckline for added texture and durability. There is also mention of a vented hem, which may offer additional comfort and mobility.\n\nThe T-shirt is described to have a 'comfort' fit, which typically means it is designed to be neither too tight nor too loose, allowing for ease of movement without being baggy. This could be ideal for casual wear or active use.\n\nCare instructions are also comprehensive, advising a gentle machine wash with similar colors in cool water at 30 degrees Celsius, indicating it is relatively easy to care for. However, one should avoid bleaching, tumble drying, and dry cleaning it, but a warm iron is permissible.\n\nLooking at the image provided:\n\n- The T-shirt appears to fit the model well, in accordance with the described 'comfort' fit.\n- The color contrast between the T-shirt and the graphic gives the garment a modern, sporty look.\n- The model is paired with denim jeans, showcasing the T-shirt's versatility for casual occasions. However, the product description suggests it can be part of an athletic ensemble when combined with Puma shorts and shoes.\n- Considering the model's statistics, prospective buyers could infer how this T-shirt might fit on a person with similar measurements.\n\nOverall, the T-shirt is positioned as a versatile item suitable for both lifestyle and sporting activities, with a strong brand identity through the graphic, and is likely comfortable and easy to maintain based on the product details provided.\n")),(0,i.kt)("h3",{id:"seeding-image-summary-embeddings"},"Seeding Image summary embeddings"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"addImageSummaryEmbeddingsToRedis")," function plays a critical role in integrating AI-generated image summaries with Redis. This process involves two main steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Generating Vector Documents"),": Utilizing the ",(0,i.kt)("inlineCode",{parentName:"p"},"getImageSummaryVectorDocuments")," function, we transform image summaries into vector documents. This transformation is crucial as it converts textual summaries into a format suitable for Redis storage.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Seeding Embeddings into Redis"),": The ",(0,i.kt)("inlineCode",{parentName:"p"},"seedImageSummaryEmbeddings")," function is then employed to store these vector documents into Redis. This step is essential for enabling efficient retrieval and search capabilities within the Redis database."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Function to generate vector documents from image summaries\nconst getImageSummaryVectorDocuments = async (\n  _products: Prisma.ProductCreateInput[],\n  _openAIApiKey: string,\n) => {\n  const vectorDocs: Document[] = [];\n\n  if (_products?.length > 0) {\n    let count = 1;\n    for (let product of _products) {\n      if (product) {\n        let imageURL = product.styleImages_default_imageURL; //cdn url\n        const imageData = await fetchImageAndConvertToBase64(imageURL);\n        imageSummary = await getOpenAIImageSummary(\n          _openAIApiKey,\n          imageData,\n          product,\n        );\n        console.log(\n          `openAI imageSummary #${count++} generated for product id: ${\n            product.productId\n          }`,\n        );\n\n        if (imageSummary) {\n          let doc = new Document({\n            metadata: {\n              productId: product.productId,\n              imageURL: imageURL,\n            },\n            pageContent: imageSummary,\n          });\n          vectorDocs.push(doc);\n        }\n      }\n    }\n  }\n  return vectorDocs;\n};\n\n// Seeding vector documents into Redis\nconst seedImageSummaryEmbeddings = async (\n  vectorDocs: Document[],\n  _redisClient: NodeRedisClientType,\n  _openAIApiKey: string,\n) => {\n  if (vectorDocs?.length && _redisClient && _openAIApiKey) {\n    const embeddings = new OpenAIEmbeddings({\n      openAIApiKey: _openAIApiKey,\n    });\n    const vectorStore = await RedisVectorStore.fromDocuments(\n      vectorDocs,\n      embeddings,\n      {\n        redisClient: _redisClient,\n        indexName: 'openAIProductImgIdx',\n        keyPrefix: 'openAIProductImgText:',\n      },\n    );\n    console.log('seeding imageSummaryEmbeddings completed');\n  }\n};\n\nconst addImageSummaryEmbeddingsToRedis = async (\n  _products: Prisma.ProductCreateInput[],\n  _redisClient: NodeRedisClientType,\n  _openAIApiKey: string,\n) => {\n  const vectorDocs = await getImageSummaryVectorDocuments(\n    _products,\n    _openAIApiKey,\n  );\n\n  await seedImageSummaryEmbeddings(vectorDocs, _redisClient, _openAIApiKey);\n};\n")),(0,i.kt)("p",null,"The image below shows the JSON structure of ",(0,i.kt)("strong",{parentName:"p"},"openAI image summary")," within RedisInsight.\n",(0,i.kt)("img",{alt:"Redis Insight AI products",src:n(57802).Z,width:"2322",height:"1426"})),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Download ",(0,i.kt)("u",null,(0,i.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight"))," to visually explore your Redis data or to engage with raw Redis commands in the workbench.")),(0,i.kt)("h2",{id:"setting-up-the-search-api"},"Setting up the search API"),(0,i.kt)("h3",{id:"api-end-point"},"API end point"),(0,i.kt)("p",null,"This section covers the API request and response structure for ",(0,i.kt)("inlineCode",{parentName:"p"},"getProductsByVSSImageSummary"),", which is essential for retrieving products based on semantic search using image summaries."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Request Format")),(0,i.kt)("p",null,"The example request format for the API is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'POST http://localhost:3000/products/getProductsByVSSImageSummary\n{\n   "searchText":"Left chest nike logo",\n\n   //optional\n   "maxProductCount": 4, // 2 (default)\n   "similarityScoreLimit":0.2, // 0.2 (default)\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Response Structure")),(0,i.kt)("p",null,"The response from the API is a JSON object containing an array of product details that match the semantic search criteria:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "productId": "10017",\n      "price": 3995,\n      "productDisplayName": "Nike Women As The Windru Blue Jackets",\n      "brandName": "Nike",\n      "styleImages_default_imageURL": "http://host.docker.internal:8080/products/01/10017/product-img.webp",\n      "productDescriptors_description_value": " Blue and White jacket made of 100% polyester, with an interior pocket ...",\n      "stockQty": 25,\n      "similarityScore": 0.163541972637,\n      "imageSummary": "The product in the image is a blue and white jacket featuring a design consistent with the provided description. ..."\n    }\n    // Additional products...\n  ],\n  "error": null,\n  "auth": "SES_fd57d7f4-3deb-418f-9a95-6749cd06e348"\n}\n')),(0,i.kt)("h3",{id:"api-implementation"},"API implementation"),(0,i.kt)("p",null,"The backend implementation of this API involves following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getProductsByVSSImageSummary")," function handles the API Request."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getSimilarProductsScoreByVSSImageSummary")," function performs semantic search on image summaries. It integrates with ",(0,i.kt)("inlineCode",{parentName:"li"},"OpenAI's")," semantic analysis capabilities to interpret the searchText and identify relevant products from ",(0,i.kt)("inlineCode",{parentName:"li"},"Redis")," vector store.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/src/services/products/src/open-ai-prompt.ts"',title:'"server/src/services/products/src/open-ai-prompt.ts"'},"const getSimilarProductsScoreByVSSImageSummary = async (\n  _params: IParamsGetProductsByVSS,\n) => {\n  let {\n    standAloneQuestion,\n    openAIApiKey,\n\n    //optional\n    KNN,\n    scoreLimit,\n  } = _params;\n\n  let vectorDocs: Document[] = [];\n  const client = getNodeRedisClient();\n\n  KNN = KNN || 2;\n  scoreLimit = scoreLimit || 1;\n\n  const embeddings = new OpenAIEmbeddings({\n    openAIApiKey: openAIApiKey,\n  });\n\n  // create vector store\n  const vectorStore = new RedisVectorStore(embeddings, {\n    redisClient: client,\n    indexName: 'openAIProductImgIdx',\n    keyPrefix: 'openAIProductImgText:',\n  });\n\n  // search for similar products\n  const vectorDocsWithScore = await vectorStore.similaritySearchWithScore(\n    standAloneQuestion,\n    KNN,\n  );\n\n  // filter by scoreLimit\n  for (let [doc, score] of vectorDocsWithScore) {\n    if (score <= scoreLimit) {\n      doc['similarityScore'] = score;\n      vectorDocs.push(doc);\n    }\n  }\n\n  return vectorDocs;\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/src/services/products/src/service-impl.ts"',title:'"server/src/services/products/src/service-impl.ts"'},"const getProductsByVSSImageSummary = async (\n  productsVSSFilter: IProductsVSSBodyFilter,\n) => {\n  let { searchText, maxProductCount, similarityScoreLimit } = productsVSSFilter;\n  let products: IProduct[] = [];\n\n  const openAIApiKey = process.env.OPEN_AI_API_KEY || '';\n  maxProductCount = maxProductCount || 2;\n  similarityScoreLimit = similarityScoreLimit || 0.2;\n\n  //VSS search\n  const vectorDocs = await getSimilarProductsScoreByVSSImageSummary({\n    standAloneQuestion: searchText,\n    openAIApiKey: openAIApiKey,\n    KNN: maxProductCount,\n    scoreLimit: similarityScoreLimit,\n  });\n\n  if (vectorDocs?.length) {\n    const productIds = vectorDocs.map((doc) => doc?.metadata?.productId);\n\n    //get product with details\n    products = await getProductByIds(productIds, true);\n  }\n\n  //...\n\n  return products;\n};\n")),(0,i.kt)("h3",{id:"frontend-ui"},"Frontend UI"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Settings configuration"),": Initially, ensure that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Semantic image summary search")," option is enabled in the settings page.\n",(0,i.kt)("img",{alt:"settings page",src:n(4871).Z,width:"1758",height:"956"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Performing a search"),": On the dashboard page, users can conduct searches using image-based queries. For example, if the query is ",(0,i.kt)("inlineCode",{parentName:"p"},"Left chest nike logo"),", the search results will display products like a Nike jacket, characterized by a logo on its left chest, reflecting the query."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"search page",src:n(23465).Z,width:"2608",height:"1216"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Viewing image summaries"),": Users can click on any product image to view the corresponding image summary generated by OpenAI. This feature offers an insightful glimpse into how AI interprets and summarizes visual content.\n",(0,i.kt)("img",{alt:"toggle image summary",src:n(90105).Z,width:"1274",height:"998"})))),(0,i.kt)("h2",{id:"ready-to-use-redis-for-semantic-image-based-queries"},"Ready to use Redis for semantic image based queries?"),(0,i.kt)("p",null,"Performing semantic search on image summaries is a powerful tool for e-commerce applications. It allows users to search for products based on their descriptions or images, enabling a more intuitive and efficient shopping experience. This tutorial has demonstrated how to integrate OpenAI's semantic analysis capabilities with Redis to create a robust search engine for e-commerce applications."),(0,i.kt)("h2",{id:"further-reading"},"Further reading"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/howtos/solutions/vector/getting-started-vector"},"Perform vector similarity search using Redis"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://js.langchain.com/docs/get_started/quickstart"},"LangChain JS")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://scrimba.com/learn/langchain"},"Learn LangChain")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://js.langchain.com/docs/integrations/vectorstores/redis"},"LangChain redis integration")))))}f.isMDXComponent=!0},2680:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-dashboard-semantic-image-770befcd5c2129a025fc5fe9058d286f.png"},81168:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-dashboard-semantic-text-e92f1bb2c539726c3125969a90d5a5d0.png"},7050:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-dashboard-41b6a52ee5d36a9db8b513d285f1d826.png"},99609:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/02-ai-bot-d5546b6243f616636d6f1b5de453d167.png"},73064:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/03-ai-bot-product-ed8e13e4a32f72b952d683473a4c4d0f.png"},12224:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/04-ai-product-shopping-cart-5445685389780e76ba7135e47f0ad20b.png"},14065:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/05-order-history-fa1ebafcf8ac4ee027f5616a00044ee9.png"},37740:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/06-admin-charts-5ae00e6182be0b4ada06049f5d18d0aa.png"},96127:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/07-admin-top-trending-941390270b22d7b4243b386af50ec743.png"},8461:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/08-settings-ai-3e13b6cf77c050ec54d6b444f47624bc.png"},4871:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/01-ui-settings-8d7e67983fe497e10e32ae9d596f3433.png"},23465:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/02-ui-image-search-770befcd5c2129a025fc5fe9058d286f.png"},90105:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/03-ui-toggle-image-summary-2f6a1e8369101b7ee64861cb94599a1c.jpg"},57802:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/redis-insight-ai-image-6cc94b6b258688ef091048bd8933f99e.png"}}]);